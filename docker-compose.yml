version: '3.8'

services:
  # CosmosDB Emulator for local development
  # cosmosdb:
  #   image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
  #   container_name: hello-container-cosmosdb
  #   hostname: cosmosdb
  #   environment:
  #     - AZURE_COSMOS_EMULATOR_PARTITION_COUNT=10
  #     - AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=true
  #     - AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE=0.0.0.0
  #   ports:
  #     - "8081:8081"
  #   volumes:
  #     - ./.containers/cosmosdb:/data/db
  #   networks:
  #     - hello-container-network

  # RabbitMQ Message Broker
  # rabbitmq:
  #   image: rabbitmq:4-management
  #   container_name: hello-container-rabbitmq
  #   hostname: hello-rabbitmq
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=guest
  #     - RABBITMQ_DEFAULT_PASS=guest
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   volumes:
  #     - ./.containers/queue/rabbitmq/data:/var/lib/rabbitmq
  #     - ./.containers/queue/rabbitmq/log:/var/log/rabbitmq
  #   networks:
  #     - hello-container-network
  #   healthcheck:
  #     test: rabbitmq-diagnostics -q ping
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3

  # HelloContainer Web API
  api:
    build:
      context: .
      dockerfile: Container/HelloContainer.Api/Dockerfile
    container_name: hello-container-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - MessageBroker__Host=hello-rabbitmq
      - MessageBroker__Username=guest
      - MessageBroker__Password=guest
    ports:
      - "5000:80"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - hello-container-network
    restart: unless-stopped

  # HelloContainer Azure Function
  function:
    build:
      context: .
      dockerfile: Ledger/HelloContainer.Function/Dockerfile
    container_name: hello-container-function
    environment:
      - AzureWebJobsStorage=UseDevelopmentStorage=true
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - RabbitMQ=amqp://guest:guest@hello-rabbitmq:5672
    ports:
      - "7071:80"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - hello-container-network
    restart: unless-stopped

  # React Frontend
  # web:
  #   build:
  #     context: ./Web
  #     dockerfile: Dockerfile
  #   container_name: hello-container-web
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - api
  #   networks:
  #     - hello-container-network
  #   restart: unless-stopped

networks:
  hello-container-network:
    driver: bridge

volumes:
  cosmosdb-data:
  rabbitmq-data: