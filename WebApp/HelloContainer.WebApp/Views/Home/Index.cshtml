@model List<HelloContainer.WebApp.Services.ContainerDto>
@{
    ViewData["Title"] = "Container Management";
}

<link href="~/css/containers.css" rel="stylesheet" />

<div class="row">
    <div class="col-md-6">
        <h1>@ViewData["Title"]</h1>
    </div>
    <div class="col-md-6 text-end">
        <!-- Removed Create New Container button -->
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.Error))
{
    <div class="alert alert-danger" role="alert">
        @ViewBag.Error
    </div>
}

@if (!string.IsNullOrEmpty(TempData["Error"] as string))
{
    <div class="alert alert-danger" role="alert">
        @TempData["Error"]
    </div>
}

@if (!string.IsNullOrEmpty(TempData["Success"] as string))
{
    <div class="alert alert-success" role="alert">
        @TempData["Success"]
    </div>
}

<!-- Add New Container Form -->
<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title">Add New Container</h5>
        <form asp-action="Create" method="post" class="row g-3">
            @Html.AntiForgeryToken()
            <div class="col-md-4">
                <input type="text" name="Name" class="form-control" placeholder="Container Name" required />
            </div>
            <div class="col-md-3">
                <input type="number" name="Capacity" class="form-control" placeholder="Capacity" step="0.1" min="0.1" value="10" required />
            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary w-100">Add Container</button>
            </div>
        </form>
    </div>
</div>

@if (Model.Any())
{
    <!-- Visual Container Display -->
    <div class="container-graph">
        @for (int i = 0; i < Model.Count; i++)
        {
            var container = Model[i];
            var leftPosition = i * 150 + 50;
            
            <div class="container-visual" style="position: absolute; left: @(leftPosition)px;">
                <!-- Capacity Label -->
                <div class="capacity-label">Capacity: @container.Capacity.ToString("F1")L</div>
                
                <!-- Container Tank -->
                <div class="container-tank">
                    <div class="water-level @(container.IsFull ? "full" : "")" 
                         style="height: @(container.FillPercentage * 100)%"></div>
                    <div class="container-amount">@container.Amount.ToString("F1")</div>
                </div>
                
                <!-- Container Info -->
                <div class="container-info">
                    <div class="container-name">@container.Name</div>
                    <div class="container-stats">
                        @((container.FillPercentage * 100).ToString("F1"))%
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="container-actions">
                    <button class="action-btn btn-add-water" 
                            onclick="showAddWaterModal('@container.Id', '@container.Name')" 
                            title="Add Water">
                        +
                    </button>
                    <button class="action-btn btn-connect" 
                            onclick="showConnectModal('@container.Id', '@container.Name')" 
                            title="Connect Container">
                        âš¡
                    </button>
                    <form asp-action="Delete" asp-route-id="@container.Id" method="post" style="display: inline;" 
                          onsubmit="return confirm('Are you sure you want to delete @container.Name?')">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="action-btn btn-delete" title="Delete Container">
                            ðŸ—‘
                        </button>
                    </form>
                </div>
            </div>
            
            <!-- Draw connections -->
            @if (container.ConnectedContainerIds.Any())
            {
                @foreach (var connectedId in container.ConnectedContainerIds)
                {
                    var connectedIndex = Model.FindIndex(c => c.Id == connectedId);
                    if (connectedIndex > i) // Only draw line once between each pair
                    {
                        // Container positions
                        var container1Right = leftPosition + 80; // Right edge of first container
                        var container2Left = connectedIndex * 150 + 50; // Left edge of second container
                        
                        // Line connects from right edge of first container to left edge of second
                        var lineLeft = container1Right;
                        var lineWidth = container2Left - container1Right;
                        var lineTop = 110; // Y position at container middle height (50px margin + 60px half container height)
                        
                        // Disconnect button at exact center of line
                        var disconnectBtnLeft = container1Right + (lineWidth / 2) - 10; // Center of line minus half button width
                        var disconnectBtnTop = lineTop - 10; // Line center minus half button height
                        
                        <!-- Connection line -->
                        <div style="position: absolute; left: @(lineLeft)px; top: @(lineTop)px; width: @(lineWidth)px; height: 3px; background: #333; z-index: 1;">
                        </div>
                        
                        <!-- Disconnect button positioned at exact center of line -->
                        <div style="position: absolute; left: @(disconnectBtnLeft)px; top: @(disconnectBtnTop)px; z-index: 2;">
                            <form asp-action="Disconnect" asp-route-sourceId="@container.Id" asp-route-targetId="@connectedId" 
                                  method="post" style="display: inline;" 
                                  onsubmit="return confirm('Disconnect these containers?')">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="disconnect-btn" title="Disconnect">Ã—</button>
                            </form>
                        </div>
                    }
                }
            }
        }
    </div>
    
    <!-- Container List removed as requested -->
}
else
{
    <div class="text-center mt-5">
        <h3>No containers found</h3>
        <p class="text-muted">Create your first container to get started.</p>
    </div>
}

<!-- Add Water Modal -->
<div id="addWaterModal" class="modal-backdrop" style="display: none;">
    <div class="connect-modal">
        <h5>Add Water to Container</h5>
        <p id="addWaterContainerName"></p>
        <form id="addWaterForm" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" id="addWaterContainerId" name="id" />
            <div class="mb-3">
                <label for="waterAmount" class="form-label">Amount (Liters):</label>
                <input type="number" id="waterAmount" name="amount" class="form-control" 
                       step="0.1" min="0.1" value="1" required />
            </div>
            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary">Add Water</button>
                <button type="button" class="btn btn-secondary" onclick="hideAddWaterModal()">Cancel</button>
            </div>
        </form>
    </div>
</div>

<!-- Connect Modal -->
<div id="connectModal" class="modal-backdrop" style="display: none;">
    <div class="connect-modal">
        <h5>Connect Container</h5>
        <p>Select a container to connect with <strong id="connectSourceName"></strong>:</p>
        <div id="connectOptions">
            <!-- Options will be populated by JavaScript -->
        </div>
        <div class="mt-3">
            <button type="button" class="btn btn-secondary" onclick="hideConnectModal()">Cancel</button>
        </div>
    </div>
</div>

<script>
    let currentContainers = @Html.Raw(Json.Serialize(Model));
    
    function showAddWaterModal(containerId, containerName) {
        document.getElementById('addWaterContainerId').value = containerId;
        document.getElementById('addWaterContainerName').textContent = 'Adding water to: ' + containerName;
        document.getElementById('addWaterForm').action = '/Home/AddWater';
        document.getElementById('addWaterModal').style.display = 'block';
    }
    
    function hideAddWaterModal() {
        document.getElementById('addWaterModal').style.display = 'none';
    }
    
    function showConnectModal(sourceId, sourceName) {
        document.getElementById('connectSourceName').textContent = sourceName;
        
        // Find containers that can be connected (not already connected and not self)
        const sourceContainer = currentContainers.find(c => c.id === sourceId);
        const availableContainers = currentContainers.filter(c => 
            c.id !== sourceId && 
            !sourceContainer.connectedContainerIds.includes(c.id)
        );
        
        const optionsDiv = document.getElementById('connectOptions');
        optionsDiv.innerHTML = '';
        
        if (availableContainers.length === 0) {
            optionsDiv.innerHTML = '<p class="text-muted">No containers available to connect.</p>';
        } else {
            availableContainers.forEach(container => {
                const option = document.createElement('div');
                option.className = 'connect-option';
                option.innerHTML = `<strong>${container.name}</strong><br><small>Capacity: ${container.capacity}L, Amount: ${container.amount}L</small>`;
                option.onclick = () => connectContainers(sourceId, container.id);
                optionsDiv.appendChild(option);
            });
        }
        
        document.getElementById('connectModal').style.display = 'block';
    }
    
    function hideConnectModal() {
        document.getElementById('connectModal').style.display = 'none';
    }
    
    function connectContainers(sourceId, targetId) {
        // Create a form and submit it
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Home/Connect';
        
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const tokenInput = document.createElement('input');
        tokenInput.type = 'hidden';
        tokenInput.name = '__RequestVerificationToken';
        tokenInput.value = token;
        form.appendChild(tokenInput);
        
        const sourceInput = document.createElement('input');
        sourceInput.type = 'hidden';
        sourceInput.name = 'sourceId';
        sourceInput.value = sourceId;
        form.appendChild(sourceInput);
        
        const targetInput = document.createElement('input');
        targetInput.type = 'hidden';
        targetInput.name = 'targetId';
        targetInput.value = targetId;
        form.appendChild(targetInput);
        
        document.body.appendChild(form);
        form.submit();
    }
    
    // Close modals when clicking outside
    document.getElementById('addWaterModal').onclick = function(e) {
        if (e.target === this) hideAddWaterModal();
    };
    
    document.getElementById('connectModal').onclick = function(e) {
        if (e.target === this) hideConnectModal();
    };
</script>

